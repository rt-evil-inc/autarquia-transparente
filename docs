## System Design Overview

### 1. Database Schema (SQLite)

**Tables:**
- `users` - Authentication for parish accounts and admin
- `parishes` - List of all parishes/municipalities
- `initiatives` - Main initiatives table
- `initiative_documents` - Documents attached to initiatives
- `initiative_tags` - Many-to-many relationship for tags
- `tags` - Available tags/categories
- `votes` - Voting records for each initiative
- `vote_sessions` - Voting session metadata

**Detailed Schema:**

```sql
-- Users table (parish accounts + admin)
users:
- id (INTEGER PRIMARY KEY)
- email (TEXT UNIQUE)
- password_hash (TEXT)
- role (TEXT: 'admin' | 'parish')
- parish_id (INTEGER, FK to parishes, NULL for admin)
- is_active (BOOLEAN DEFAULT true)
- created_at (DATETIME)
- updated_at (DATETIME)

-- Parishes table
parishes:
- id (INTEGER PRIMARY KEY)
- name (TEXT UNIQUE)
- code (TEXT UNIQUE) -- e.g., "alvalade", "parque-nacoes"
- description (TEXT)
- created_at (DATETIME)

-- Initiatives table
initiatives:
- id (INTEGER PRIMARY KEY)
- title (TEXT NOT NULL)
- description (TEXT)
- content (TEXT) -- Full initiative content
- parish_id (INTEGER, FK to parishes)
- category (TEXT) -- "Finanças", "Transparência", etc.
- status (TEXT: 'draft' | 'submitted' | 'approved' | 'rejected')
- submission_date (DATETIME)
- vote_date (DATETIME)
- created_by (INTEGER, FK to users)
- created_at (DATETIME)
- updated_at (DATETIME)

-- Documents table
initiative_documents:
- id (INTEGER PRIMARY KEY)
- initiative_id (INTEGER, FK to initiatives)
- filename (TEXT)
- original_filename (TEXT)
- file_path (TEXT)
- file_size (INTEGER)
- mime_type (TEXT)
- uploaded_at (DATETIME)

-- Tags table
tags:
- id (INTEGER PRIMARY KEY)
- name (TEXT UNIQUE)
- color (TEXT) -- Hex color for UI
- created_at (DATETIME)

-- Initiative-Tags junction table
initiative_tags:
- initiative_id (INTEGER, FK to initiatives)
- tag_id (INTEGER, FK to tags)
- PRIMARY KEY (initiative_id, tag_id)

-- Votes table
votes:
- id (INTEGER PRIMARY KEY)
- initiative_id (INTEGER, FK to initiatives)
- voter_name (TEXT) -- Council member name
- vote (TEXT: 'favor' | 'against' | 'abstention')
- notes (TEXT) -- Optional voting notes
- created_at (DATETIME)
```

### 2. Authentication & Authorization

**Implementation:**
- JWT tokens for session management
- bcrypt for password hashing
- Role-based access control (admin vs parish)
- Protected routes using SvelteKit hooks

**User Roles:**
- **Admin**: Full access, can manage parishes, users, and all initiatives
- **Parish**: Can only manage initiatives for their assigned parish

### 3. File Upload System

**Implementation:**
- Store files in `/static/uploads/documents/`
- Generate unique filenames to prevent conflicts
- Support PDF, DOC, DOCX file types
- File size limits and validation
- Secure file serving with proper headers

### 4. Frontend Structure (SvelteKit 5)

**Pages:**
```
/                          # Public homepage with initiative listing
/iniciativa/[id]           # Public initiative detail page
/login                     # Login page
/admin/                    # Admin dashboard
/admin/parishes            # Parish management
/admin/users               # User management
/admin/initiatives         # All initiatives overview
/admin/tags                # Tag management
/parish/                   # Parish dashboard
/parish/initiatives        # Parish initiatives management
/parish/initiatives/new    # Create new initiative
/parish/initiatives/[id]   # Edit initiative
```

**Components (using shadcn-svelte):**
- `InitiativeCard` - Display initiative summary
- `InitiativeList` - Grid/list of initiatives
- `TagBadge` - Tag display component
- `VoteDisplay` - Show voting results
- `DocumentList` - Show attached documents
- `SearchBar` - Initiative search functionality
- `FilterSidebar` - Filter by parish, category, tags
- `LoginForm` - Authentication form
- `InitiativeForm` - Create/edit initiatives
- `UserForm` - User management
- `ParishForm` - Parish management

### 5. API Routes (SvelteKit server routes)

**Public API:**
- `GET /api/initiatives` - List initiatives with filters
- `GET /api/initiatives/[id]` - Get initiative details
- `GET /api/parishes` - List parishes
- `GET /api/tags` - List tags
- `GET /api/documents/[id]` - Serve document files

**Protected API:**
- `POST /api/auth/login` - User authentication
- `POST /api/auth/logout` - Logout
- `GET /api/auth/me` - Get current user

**Admin API:**
- `GET|POST /api/admin/users` - User management
- `GET|POST /api/admin/parishes` - Parish management
- `GET|POST /api/admin/tags` - Tag management
- `GET /api/admin/initiatives` - All initiatives

**Parish API:**
- `GET|POST /api/parish/initiatives` - Parish initiatives
- `PUT|DELETE /api/parish/initiatives/[id]` - Edit/delete initiative
- `POST /api/parish/initiatives/[id]/documents` - Upload documents
- `POST /api/parish/initiatives/[id]/votes` - Record votes

### 6. Features Implementation

**Public Features:**
- Browse all approved initiatives
- Search by title, content, parish
- Filter by category, tags, parish, date
- View initiative details with documents and votes
- Responsive design with modern UI

**Parish Features:**
- Dashboard with their initiatives
- Create new initiatives with rich text editor
- Upload multiple documents per initiative
- Record voting results for their council
- Edit draft initiatives
- View submission status

**Admin Features:**
- Complete system overview dashboard
- Manage all parishes and users
- Approve/reject initiatives
- Manage tags and categories
- System-wide statistics
- Bulk operations

### 7. Technology Stack Integration

**Database:**
- Bun's SQLite adapter for database operations
- Database migrations system
- Seed data for initial setup

**Authentication:**
- JWT tokens stored in HTTP-only cookies
- bcrypt for password hashing
- SvelteKit hooks for route protection

**UI Framework:**
- shadcn-svelte components throughout
- Tailwind CSS for styling
- Lucide icons for consistent iconography
- Form validation with proper error handling

**File Handling:**
- Multer-like file upload handling
- File type validation
- Secure file storage and serving
- Document preview capabilities

### 8. Development Phases

**Phase 1: Core Setup**
1. Database schema and migrations
2. Basic authentication system
3. Core API routes
4. Basic UI layout with shadcn-svelte

**Phase 2: Initiative Management**
1. Initiative CRUD operations
2. File upload system
3. Tag management
4. Basic parish and admin interfaces

**Phase 3: Advanced Features**
1. Advanced search and filtering
2. Voting system
3. Dashboard analytics
4. Complete admin panel

**Phase 4: Polish**
1. Responsive design improvements
2. Performance optimization
3. Error handling and validation
4. Documentation